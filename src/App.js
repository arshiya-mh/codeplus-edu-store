import { BrowserRouter, Route, Routes } from "react-router-dom";
import './App.css'
import 'bootstrap/dist/css/bootstrap.rtl.min.css';
import Home from './pages/Home/Home'
import Aboutus from './pages/Aboutus/Aboutus'
import Blog from './pages/Blog/Blog'
import Login from './pages/Login/Login'
import Panel from './pages/Panel/Panel'
import Course from './pages/Course/Course'
import Page404 from "./pages/Page404";
import Privteroutes from './components/privteroutes'
function App() {
  return (
    <>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<Aboutus />} />
          <Route path="/blog/*" element={<Blog />}>
            <Route path='js' element={<p>JavaScript یکی از پرکاربردترین و محبوب‌ترین زبان‌های برنامه‌نویسی در جهان است که نقش مهمی در توسعه وب ایفا می‌کند. این زبان در ابتدا تنها برای اضافه کردن تعامل (interactivity) به صفحات وب طراحی شده بود، اما امروزه با پیشرفت تکنولوژی‌ها و ابزارها، به یکی از ارکان اصلی توسعه‌ی نرم‌افزارهای وب و حتی اپلیکیشن‌های موبایل و دسکتاپ تبدیل شده است.

              چرا باید JavaScript یاد بگیریم؟
              JavaScript زبانی است که تقریباً در تمامی مرورگرهای مدرن پشتیبانی می‌شود و یادگیری آن دروازه ورود به دنیای فرانت‌اند و بک‌اند محسوب می‌شود. برای ساخت صفحات داینامیک، انیمیشن‌ها، فرم‌های تعاملی، و حتی اپلیکیشن‌های پیچیده تک‌صفحه‌ای (SPA)، JavaScript ضروری است. از طرفی، فریم‌ورک‌هایی مانند React، Angular و Vue.js نیز بر پایه‌ی JS هستند.

              مراحل یادگیری JavaScript
              مبانی (Basics): شروع با مفاهیمی مانند متغیرها، انواع داده، عملگرها، شرط‌ها (if/else)، حلقه‌ها (for, while)، و توابع.

              DOM (Document Object Model): نحوه‌ی تعامل با عناصر HTML از طریق JS، مانند تغییر محتوا، اضافه‌کردن یا حذف عناصر و مدیریت رویدادها (events).

              توابع پیشرفته و اسکوپ: کار با توابع callback، مفاهیم scope و closure که درک آن‌ها برای ساخت کدهای بهینه ضروری است.

              آرایه‌ها و اشیاء: ساختارهای مهمی برای ذخیره‌سازی داده‌ها و نحوه‌ی کار با متدهای مفیدی مانند map, filter, reduce و ...

              Promise و Async/Await: درک برنامه‌نویسی asynchronous که برای کار با APIها و درخواست‌های HTTP لازم است.

              ES6 و ویژگی‌های جدید: یادگیری ویژگی‌های جدید مثل let, const, arrow functions, template literals و ... که کد شما را تمیزتر و مدرن‌تر می‌کند.

              منابع پیشنهادی برای یادگیری
              MDN Web Docs: مرجع رسمی و جامع JavaScript.

              freeCodeCamp: دوره‌های رایگان با تمرین‌های عملی.

              YouTube (مثلاً The Net Ninja یا Traversy Media): آموزش‌های ویدیویی مفید و پروژه‌محور.

              کتاب‌های مرجع: مانند Eloquent JavaScript و You Don’t Know JS.

              تمرین و پروژه‌سازی
              یادگیری بدون تمرین تأثیر کمی دارد. با انجام پروژه‌های کوچک مانند ماشین‌حساب، لیست کارها (To-Do List)، اسلایدر تصاویر، یا بازی‌های ساده، مهارت‌های خود را در عمل تقویت کنید. همچنین شرکت در چالش‌هایی مثل #100DaysOfCode می‌تواند انگیزه‌بخش باشد.

              جمع‌بندی
              JavaScript زبانی پویا، قدرتمند و در حال رشد است که برای هر توسعه‌دهنده‌ی وب ضروری است. مسیر یادگیری آن با چالش همراه است، اما با منابع درست، تمرین مداوم، و پروژه‌محور بودن، می‌توانید به راحتی به یک توسعه‌دهنده حرفه‌ای در این زبان تبدیل شوید.</p>} />
            <Route path="react" element={<p>React یا React.js یک کتابخانه‌ی متن‌باز جاوااسکریپت است که توسط فیسبوک توسعه یافته و امروزه یکی از محبوب‌ترین ابزارها برای ساخت رابط کاربری (UI) وب‌اپلیکیشن‌ها محسوب می‌شود. هدف اصلی React ساخت کامپوننت‌های قابل‌استفاده‌ی مجدد و مدیریت مؤثر وضعیت (state) در اپلیکیشن‌های پیچیده است.

              چرا React؟
              React این امکان را می‌دهد تا توسعه‌دهندگان بتوانند رابط‌های کاربری پیچیده را به بخش‌های کوچک‌تر، قابل‌فهم‌تر و قابل‌مدیریت‌تری به نام "کامپوننت" تقسیم کنند. این معماری کامپوننت‌محور توسعه، نگهداری و گسترش پروژه‌ها را بسیار آسان‌تر می‌کند. همچنین استفاده از Virtual DOM باعث بهینه‌سازی رندر و افزایش سرعت عملکرد برنامه می‌شود.

              پیش‌نیازهای یادگیری React
              قبل از شروع یادگیری React، آشنایی با مفاهیم زیر بسیار مفید و ضروری است:

              HTML و CSS

              جاوااسکریپت به‌ویژه ES6 (مثل let, const, arrow functions, spread/rest operators و ...)

              مفاهیم DOM و تعامل با آن

              آشنایی ابتدایی با npm و ماژول‌ها

              مفاهیم کلیدی در React
              کامپوننت‌ها (Components): واحدهای مستقل رابط کاربری هستند. می‌توان آن‌ها را به دو دسته تابعی (Function Components) و کلاسی تقسیم کرد.

              JSX: ترکیبی از HTML و JavaScript که در React استفاده می‌شود. این سینتکس، خوانایی و ساختار کد را بهبود می‌دهد.

              props: ورودی‌هایی هستند که برای ارسال داده بین کامپوننت‌ها استفاده می‌شوند.

              state: برای نگهداری و مدیریت داده‌های داخلی یک کامپوننت استفاده می‌شود.

              رویدادها (Events): مانند کلیک و تایپ که در React به صورت استاندارد جاوااسکریپتی مدیریت می‌شوند.

              هوک‌ها (Hooks): توابعی مثل useState, useEffect و ... که فقط در کامپوننت‌های تابعی استفاده می‌شوند و جایگزین بسیاری از قابلیت‌های کامپوننت‌های کلاسی شده‌اند.

              ساختار پروژه در React
              React از ابزارهایی مانند Create React App برای ایجاد سریع پروژه استفاده می‌کند. این ابزار به توسعه‌دهنده این امکان را می‌دهد تا بدون درگیر شدن با پیکربندی Webpack و Babel، به سرعت شروع به کدنویسی کند.

              مسیر یادگیری پیشنهادشده
              نصب Node.js و آشنایی با npm

              یادگیری ساخت کامپوننت‌های ساده

              درک props و state

              مدیریت رویدادها و فرم‌ها

              یادگیری هوک‌ها

              ارتباط با APIها

              استفاده از کتابخانه‌های مدیریت وضعیت مانند Redux یا Context API

              پیاده‌سازی مسیریابی با React Router

              پروژه‌سازی و تمرین

              منابع پیشنهادی برای یادگیری React
              reactjs.org: وب‌سایت رسمی و جامع React

              freeCodeCamp و Codecademy: دوره‌های عملی

              یوتیوب (مثلاً The Net Ninja یا Academind): آموزش‌های قدم‌به‌قدم و پروژه‌محور

              مقالات و داکیومنت‌های فارسی مانند sabzlearn، reactfa و ...

              جمع‌بندی
              React ابزاری مدرن و محبوب برای ساخت رابط‌های کاربری قدرتمند است. یادگیری آن ممکن است در ابتدا چالش‌برانگیز به‌نظر برسد، اما با تمرین مستمر، انجام پروژه‌های عملی، و پیروی از منابع معتبر، می‌توان آن را به یکی از نقاط قوت اصلی خود تبدیل کرد. آینده توسعه وب در دست ابزارهایی مانند React است.</p>} />
            <Route path="python" element={<p>پایتون یکی از محبوب‌ترین و پرکاربردترین زبان‌های برنامه‌نویسی حال حاضر دنیاست. این زبان به دلیل سادگی، خوانایی بالا، و کاربرد وسیع در حوزه‌های مختلف مانند هوش مصنوعی، داده‌کاوی، توسعه وب، اتوماسیون و حتی بازی‌سازی، انتخاب اول بسیاری از تازه‌کارها و حرفه‌ای‌هاست.

              چرا پایتون یاد بگیریم؟
              ساده و قابل‌فهم: نحو (syntax) پایتون بسیار شبیه به زبان طبیعی (مانند انگلیسی) است و یادگیری آن برای مبتدیان راحت‌تر از زبان‌های دیگر است.

              چندمنظوره بودن: پایتون را می‌توان برای اسکریپت‌نویسی، توسعه وب، علم داده، هوش مصنوعی، یادگیری ماشین، امنیت و شبکه، بازی‌سازی، و بسیاری کاربردهای دیگر استفاده کرد.

              جامعه فعال و منابع گسترده: به‌دلیل محبوبیت زیاد، منابع آموزشی و پاسخ به سوالات تقریباً برای هر مشکل یا موضوعی موجود است.

              مراحل یادگیری پایتون
              مقدمات: آشنایی با متغیرها، انواع داده (عدد، رشته، لیست، دیکشنری، مجموعه)، عملگرها و دستورات شرطی (if, elif, else)

              حلقه‌ها و توابع: for, while, تعریف توابع با def، و درک مفهوم return

              لیست‌ها و دیکشنری‌ها: کار با ساختارهای داده و متدهای مختلف آن‌ها مانند append(), pop(), keys(), values() و ...

              ماژول‌ها و پکیج‌ها: استفاده از کتابخانه‌های استاندارد پایتون مانند math, datetime, و نصب کتابخانه‌های خارجی با pip

              ورودی و خروجی فایل: خواندن و نوشتن فایل‌ها با open() و مدیریت فایل‌ها

              برنامه‌نویسی شی‌گرا (OOP): آشنایی با کلاس، شی، وراثت، و سازنده‌ها (__init__)

              کاربردهای واقعی: یادگیری کار با کتابخانه‌هایی مانند requests, pandas, matplotlib, tkinter, flask, و ...

              پایتون در عمل
              پایتون در پروژه‌های واقعی بسیار کاربرد دارد. برخی مثال‌ها عبارت‌اند از:

              ساخت ربات تلگرام

              تحلیل داده‌های آماری

              ساخت اپلیکیشن وب با فریم‌ورک‌هایی مثل Flask یا Django

              توسعه مدل‌های یادگیری ماشین با TensorFlow یا Scikit-learn

              اتوماسیون کارهای تکراری با اسکریپت‌نویسی

              منابع پیشنهادی برای یادگیری پایتون
              w3schools.com و programiz.com: آموزش‌های گام‌به‌گام و ساده

              sololearn و codecademy: دوره‌های تعاملی برای مبتدی‌ها

              مستندات رسمی Python (python.org): مرجع دقیق و حرفه‌ای

              دوره‌های یوتیوب مثل Mosh, freeCodeCamp: آموزش‌های جامع با مثال‌های عملی

              کتاب‌های مرجع: مانند Automate the Boring Stuff with Python و Python Crash Course

              پیشنهاد برای تمرین
              نوشتن ماشین‌حساب ساده

              ساخت دفترچه تلفن با ذخیره‌سازی در فایل

              جمع‌آوری اطلاعات از وب با Web Scraping

              تحلیل فایل اکسل با pandas

              ساخت GUI ساده با tkinter

              جمع‌بندی
              پایتون زبانی قدرتمند و در عین حال ساده است که برای شروع برنامه‌نویسی یا حتی توسعه‌ی پروژه‌های جدی و حرفه‌ای انتخابی عالی به شمار می‌رود. با پشتکار، تمرین منظم و انجام پروژه‌های واقعی، می‌توان به مهارتی قابل اتکا در این زبان رسید.</p>} />
            <Route path="crypto" element={<p>کریپتوکارنسی یا ارز دیجیتال، نوعی پول دیجیتالی رمزنگاری‌شده است که به‌صورت غیرمتمرکز و بدون نیاز به نهاد مرکزی (مثل بانک‌ها یا دولت‌ها) عمل می‌کند. از زمان پیدایش بیت‌کوین در سال ۲۰۰۹ توسط فردی با نام مستعار «ساتوشی ناکاموتو»، دنیای مالی دچار تحول بزرگی شد. هدف اصلی ارزهای دیجیتال، فراهم‌کردن روشی امن، سریع و بدون واسطه برای تبادل ارزش در اینترنت است.

              مبانی ارز دیجیتال چیست؟
              بلاک‌چین (Blockchain): فناوری زیربنایی اکثر ارزهای دیجیتال است. زنجیره‌ای از بلوک‌ها که اطلاعات تراکنش‌ها را به صورت دائمی و شفاف ذخیره می‌کند.

              غیرمتمرکز بودن: هیچ نهادی کنترل مستقیم بر ارزها ندارد. این ویژگی از دستکاری، تورم و سانسور جلوگیری می‌کند.

              رمزنگاری (Cryptography): تکنیک‌هایی برای محافظت از داده‌ها و اطمینان از امنیت تراکنش‌ها در شبکه.

              ماینینگ (Mining): فرایند تایید تراکنش‌ها و افزودن آن‌ها به بلاک‌چین توسط کاربران خاصی به‌نام ماینر (مخصوص ارزهایی مثل بیت‌کوین).

              ارزهای دیجیتال معروف
              Bitcoin (BTC): اولین و مشهورترین ارز دیجیتال. طلای دیجیتال.

              Ethereum (ETH): پلتفرمی برای قراردادهای هوشمند و اپلیکیشن‌های غیرمتمرکز (dApps).

              Binance Coin (BNB): توکن بومی صرافی بایننس.

              Solana, Cardano, XRP: پروژه‌هایی با اهداف مختلف در زمینه سرعت، مقیاس‌پذیری و قرارداد هوشمند.

              چگونه یادگیری کریپتو را شروع کنیم؟
              درک مفاهیم پایه: مانند کیف پول، کلید عمومی و خصوصی، آدرس، گس فی، قرارداد هوشمند.

              آشنایی با کیف پول‌ها (Wallets): کیف پول نرم‌افزاری (مثل Trust Wallet و MetaMask) یا سخت‌افزاری (مثل Ledger).

              یادگیری کار با صرافی‌ها: مثل Binance، KuCoin، و صرافی‌های غیرمتمرکز مانند Uniswap.

              امنیت در کریپتو: مهم‌ترین بخش! حفظ کلید خصوصی، عدم فاش‌کردن Seed Phrase و جلوگیری از فیشینگ.

              تحلیل بازار: یادگیری تحلیل تکنیکال و فاندامنتال برای بررسی قیمت و آینده پروژه‌ها.

              کاربردهای واقعی ارزهای دیجیتال
              ارسال پول بدون نیاز به بانک

              سرمایه‌گذاری و ذخیره‌ ارزش

              تأمین مالی جمعی (Crowdfunding)

              بازی‌های بلاک‌چینی و NFT

              توسعه‌ی قراردادهای هوشمند و اپلیکیشن‌های غیرمتمرکز (DeFi)</p>} />
            <Route path="php" element={<p>PHP (مخفف "Hypertext Preprocessor") یک زبان برنامه‌نویسی سمت سرور است که برای ساخت وب‌سایت‌های پویا و اپلیکیشن‌های تحت وب استفاده می‌شود. این زبان در کنار HTML، CSS و JavaScript یکی از پایه‌های اصلی توسعه‌ی وب به شمار می‌رود و امروزه میلیون‌ها وب‌سایت از جمله وردپرس با PHP ساخته شده‌اند.

              🎯 هدف این دوره
              هدف از این کلاس آموزشی، آموزش مفاهیم پایه تا پیشرفته زبان PHP است به‌طوری که شرکت‌کنندگان پس از پایان دوره قادر باشند پروژه‌های واقعی مانند وب‌سایت‌های داینامیک، سیستم ثبت‌نام کاربران، مدیریت محتوا و ارتباط با پایگاه داده را به‌صورت حرفه‌ای پیاده‌سازی کنند.

              🧩 سرفصل‌های دوره
              آشنایی با PHP و نصب ابزارها (XAMPP, Laragon)

              مبانی زبان PHP: متغیرها، داده‌ها، شرط‌ها، حلقه‌ها

              توابع و ساختارهای برنامه‌نویسی در PHP

              کار با فرم‌ها و دریافت داده (GET, POST)

              مدیریت فایل‌ها و پوشه‌ها

              ارتباط با پایگاه داده (MySQL) با mysqli و PDO

              مدیریت نشست‌ها (Sessions) و کوکی‌ها

              ایجاد صفحات داینامیک و عملیاتی مانند ثبت‌نام، ورود، خروج

              پروژه عملی: طراحی یک وب‌سایت ساده از صفر تا صد

              مقدمه‌ای بر امنیت، اعتبارسنجی فرم‌ها و محافظت از داده‌ها

              👤 مخاطبین این دوره چه کسانی هستند؟
              علاقه‌مندان به طراحی و توسعه وب

              دانشجویان رشته‌های کامپیوتر و IT

              طراحان سایت که می‌خواهند به مهارت‌های بک‌اند مسلط شوند

              کسانی که قصد دارند با PHP وارد بازار کار یا پروژه‌های فریلنسری شوند

              🛠 ابزارها و تکنولوژی‌های مورد استفاده
              PHP (نسخه 7 یا 8)

              XAMPP یا Laragon

              MySQL

              phpMyAdmin

              HTML/CSS (برای بخش رابط کاربری)

              ✅ مزایای شرکت در این دوره
              آموزش پروژه‌محور و قدم‌به‌قدم

              مدرس با تجربه و پاسخ‌گو

              تمرین‌های عملی در هر جلسه

              امکان رفع اشکال و دریافت پروژه تمرینی

              دریافت گواهی پایان دوره (در صورت تمایل)</p>} />
            <Route path="cplus" element={<p>++C یک زبان برنامه‌نویسی سطح بالا، چندسبکی (multi-paradigm) و قدرتمند است که برای ساخت نرم‌افزارهای سیستمی، بازی‌ها، موتورهای پردازشی، نرم‌افزارهای تعبیه‌شده (Embedded) و بسیاری از برنامه‌های کاربردی استفاده می‌شود. این زبان در دهه ۱۹۸۰ توسط Bjarne Stroustrup طراحی شد و در واقع توسعه‌یافته زبان C محسوب می‌شود با افزودن ویژگی‌های شیء‌گرایی.

              ✨ ویژگی‌های مهم ++C
              شیءگرایی (Object-Oriented): امکان تعریف کلاس، شیء، وراثت، چندریختی و ...

              کارایی بسیار بالا: مناسب برای نرم‌افزارهایی که نیاز به سرعت و مصرف پایین حافظه دارند.

              نزدیکی به سخت‌افزار: به دلیل ساختار مشابه C، برای توسعه‌ی سیستم‌عامل و درایورها بسیار مناسب است.

              پشتیبانی از برنامه‌نویسی رویه‌ای و تابع‌محور و حتی generic.

              قابلیت مدیریت حافظه به‌صورت دستی (با استفاده از pointers و dynamic allocation).

              📚 چرا ++C یاد بگیریم؟
              پایه‌ای برای یادگیری سایر زبان‌ها مانند جاوا، سی‌شارپ، Rust و ...

              حضور در بسیاری از رقابت‌های برنامه‌نویسی مانند ACM و Codeforces

              استفاده در توسعه‌ی بازی، شبیه‌سازی‌ها، رباتیک، هوش مصنوعی، پردازش تصویر و ...

              مناسب برای درک بهتر مفاهیم پایه مانند ساختار داده، الگوریتم، حافظه، اشاره‌گرها و کامپایلر

              🧱 مفاهیم پایه‌ای که باید در ++C یاد بگیرید
              متغیرها و نوع داده‌ها (int, float, char, string, bool)

              ساختارهای کنترلی (if, else, switch, while, for)

              توابع (Functions) و بازگشتی (Recursion)

              آرایه‌ها و رشته‌ها

              اشاره‌گرها (Pointers) و آدرس حافظه

              ساختارها و کلاس‌ها (Structures & Classes)

              مفاهیم شی‌ءگرایی: encapsulation, inheritance, polymorphism

              مدیریت حافظه با new/delete و جلوگیری از Memory Leak

              کتابخانه استاندارد STL: vector, map, queue, stack و الگوریتم‌ها

              🔧 ابزارهای لازم برای برنامه‌نویسی ++C
              کامپایلرهایی مانند GCC (در لینوکس) یا MinGW (در ویندوز)

              محیط‌های برنامه‌نویسی مثل:

              Code::Blocks

              Visual Studio / Visual Studio Code

              Dev C++

            </p>} />

          </Route>


          <Route path="/login" element={<Login />} />
          <Route path="/panel" element={<Privteroutes><Panel /></Privteroutes>} />
          <Route path="/course" element={<Course />} />
          <Route path="*" element={<Page404 />} />
        </Routes>
      </BrowserRouter>
    </>
  )
}

export default App;
